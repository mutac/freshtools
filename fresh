#!/usr/bin/env python

import click
import logging
import settings
import freshtools.cache
import freshtools.summary
import freshtools.models
from freshtools.log import log_to_stdout
from refresh2.auth import DeveloperWebserverFlow, TokenStore, run_flow
from refresh2.api import Api


def get_freshbooks_api(client_id, client_secret, store):
    flow = DeveloperWebserverFlow(client_id, client_secret)
    session = run_flow(flow, store)
    api = Api(session)

    return api


@click.group()
@click.option('-v', '--verbose', count=True)
def cli(verbose):
    if verbose > 0:
        level = logging.DEBUG
    else:
        level = logging.INFO

    log_to_stdout(level)


#
# Cache commands
#

@cli.group()
def cache():
    pass


@cache.command()
def init():
    freshtools.cache.initialize()


@cache.command()
def status():
    freshtools.cache.status()


@cache.command()
@click.argument('models', nargs=-1, required=False)
def show(models):
    if len(models) > 0:
        models = freshtools.models.models_by_name(models)
    else:
        models = freshtools.models.ALL_MODELS

    freshtools.cache.show(models)


@cache.command()
@click.argument('models', nargs=-1, required=False)
def pull(models):
    if len(models) > 0:
        models = freshtools.models.models_by_name(models)
    else:
        models = freshtools.models.ALL_MODELS

    freshtools.cache.pull(api, models)


#
# Summarization commands
#

@cli.group()
def summarize():
    pass


@summarize.command()
@click.option('--client', default=None, help='Client name')
@click.option('--start', default=None, help='Start date')
@click.option('--end', default=None, help='End date')
def tasks_by_client(client, start, end):
    client_object = None

    if client is not None:
        client_object = freshtools.models.Client.get_the_one(client)

    summary = freshtools.summary.TasksByClient(
        client=client_object,
        start_date=start,
        end_date=end
    )

    summary.print_report()


@summarize.command()
@click.option('--client', default=None, help='Client name')
@click.option('--start', default=None, help='Start date')
@click.option('--end', default=None, help='End date')
def days_by_client_task(client, start, end):
    client_object = None

    if client is not None:
        client_object = freshtools.models.Client.get_the_one(client)

    summary = freshtools.summary.DaysByClientTask(
        client=client_object,
        start_date=start,
        end_date=end
    )

    summary.print_report()


#
# Main
#

store = TokenStore('.credentials')
api = get_freshbooks_api(
    settings.FRESHBOOKS_CLIENT_ID,
    settings.FRESHBOOKS_CLIENT_SECRET,
    store
)

if __name__ == '__main__':
    cli()
