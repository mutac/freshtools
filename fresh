#!/usr/bin/env python

import click
import datetime
import logging
import settings
import freshtools.cache
import freshtools.summary
import freshtools.models

from freshtools.entries import time_entry_window
from freshtools.command import DateTimeParameter, AliasedGroup
from freshtools.log import add_destination, list_destinations, remove_destination, time_entries, log_entries
from freshtools.console import log_to_stdout
from freshtools.date import (todays_date, n_days_ago_date, this_weeks_date,
                             n_weeks_ago_date, day_starting_and_ending_datetime,
                             week_starting_and_ending_datetime, month_starting_and_ending_datetime,
                             n_months_ago_date, this_months_date, year_starting_and_ending_datetime,
                             this_years_date, n_years_ago_date)
from refresh2.auth import DeveloperWebserverFlow, TokenStore, run_flow
from refresh2.api import Api


def get_freshbooks_api(client_id, client_secret, store):
    flow = DeveloperWebserverFlow(client_id, client_secret)
    session = run_flow(flow, store)
    api = Api(session)

    return api


def printer(s):
    print s


@click.group()
@click.option('-v', '--verbose', count=True)
def cli(verbose):
    if verbose > 0:
        level = logging.DEBUG
    else:
        level = logging.INFO

    log_to_stdout(level)


@cli.command()
def init():
    do_it = False

    if freshtools.cache.exists():
        do_it = click.prompt(
            'Are you sure you want to re-initialize your workspace?', type=bool)
    else:
        do_it = True

    if do_it:
        freshtools.cache.initialize()


@cli.command()
def status():
    freshtools.cache.status()


@cli.command()
@click.argument('models', nargs=-1, required=False)
def show(models):
    if len(models) > 0:
        models = freshtools.models.models_by_name(models)
    else:
        models = freshtools.models.ALL_MODELS

    freshtools.cache.show(models)


@cli.command()
@click.argument('models', nargs=-1, required=False)
def pull(models):
    if len(models) > 0:
        models = freshtools.models.models_by_name(models)
    else:
        models = freshtools.models.ALL_MODELS

    freshtools.cache.pull(api, models)


#
# Summarization commands
#

@cli.group(cls=AliasedGroup)
def summarize():
    pass


@summarize.command()
@click.option('--client', default=None, help='Client name')
@click.option('--start', type=DateTimeParameter(), default=None, help='Start date')
@click.option('--end', type=DateTimeParameter(), default=None, help='End date')
def tasks_by_client(client, start, end):
    window = time_entry_window(client, start, end)
    freshtools.summary.TasksByClient(window).print_report(printer)


@summarize.command(aliases=['days'])
@click.option('--client', default=None, help='Client name')
@click.option('--start', type=DateTimeParameter(), default=None, help='Start date')
@click.option('--end', type=DateTimeParameter(), default=None, help='End date')
def days_by_client_project_task(client, start, end):
    window = time_entry_window(client, start, end)
    freshtools.summary.DaysByClientProjectTask(window).print_report(printer)


@summarize.command(aliases=['weeks'])
@click.option('--client', default=None, help='Client name')
@click.option('--start', type=DateTimeParameter(), default=None, help='Start date')
@click.option('--end', type=DateTimeParameter(), default=None, help='End date')
def weeks_by_client_project(client, start, end):
    window = time_entry_window(client, start, end)
    freshtools.summary.WeeksByClientProject(window).print_report(printer)


@summarize.command(aliases=['months'])
@click.option('--client', default=None, help='Client name')
@click.option('--start', type=DateTimeParameter(), default=None, help='Start date')
@click.option('--end', type=DateTimeParameter(), default=None, help='End date')
def months_by_client_project(client, start, end):
    window = time_entry_window(client, start, end)
    freshtools.summary.MonthsByClientProject(window).print_report(printer)


@summarize.command(aliases=['years'])
@click.option('--client', default=None, help='Client name')
@click.option('--start', type=DateTimeParameter(), default=None, help='Start date')
@click.option('--end', type=DateTimeParameter(), default=None, help='End date')
def years_by_client_project(client, start, end):
    window = time_entry_window(client, start, end)
    freshtools.summary.YearsByClientProject(window).print_report(printer)


@summarize.command()
def today():
    start, end = day_starting_and_ending_datetime(todays_date())
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.DaysByClientProjectTask(window).print_report(printer)


@summarize.command()
def yesterday():
    start, end = day_starting_and_ending_datetime(n_days_ago_date(1))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.DaysByClientProjectTask(window).print_report(printer)


@summarize.command()
def two_days_ago():
    start, end = day_starting_and_ending_datetime(n_days_ago_date(2))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.DaysByClientProjectTask(window).print_report(printer)


@summarize.command()
def this_week():
    start, end = week_starting_and_ending_datetime(todays_date())
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.WeeksByClientProject(window).print_report(printer)


@summarize.command()
def last_week():
    start, end = week_starting_and_ending_datetime(n_weeks_ago_date(1))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.WeeksByClientProject(window).print_report(printer)


@summarize.command()
def two_weeks_ago():
    start, end = week_starting_and_ending_datetime(n_weeks_ago_date(2))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.WeeksByClientProject(window).print_report(printer)


@summarize.command()
def this_month():
    start, end = month_starting_and_ending_datetime(todays_date())
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.MonthsByClientProject(window).print_report(printer)


@summarize.command()
def last_month():
    start, end = month_starting_and_ending_datetime(n_months_ago_date(1))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.MonthsByClientProject(window).print_report(printer)


@summarize.command()
def two_months_ago():
    start, end = month_starting_and_ending_datetime(n_months_ago_date(2))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.MonthsByClientProject(window).print_report(printer)


@summarize.command()
def this_year():
    start, end = year_starting_and_ending_datetime(todays_date())
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.YearsByClientProject(window).print_report(printer)


@summarize.command()
def last_year():
    start, end = year_starting_and_ending_datetime(n_years_ago_date(1))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.YearsByClientProject(window).print_report(printer)


@summarize.command()
def two_years_ago():
    start, end = year_starting_and_ending_datetime(n_years_ago_date(2))
    window = time_entry_window(start_date=start, end_date=end)
    freshtools.summary.YearsByClientProject(window).print_report(printer)


#
# Time logging
#

@cli.group()
def log():
    pass


@log.command()
@click.option('--client', default=None, help='Client name')
@click.option('--start', type=DateTimeParameter(), default=None, help='Start date')
@click.option('--end', type=DateTimeParameter(), default=None, help='End date')
@click.option('--to', required=True, help='Destination log name')
def day(client, start, end, to):
    if client is not None:
        client = get_the_one_or_fail(freshtools.models.Client, client)

    to = get_the_one_or_fail(freshtools.models.LogDestination, to)

    entries = time_entries(client, start, end)
    log_entries(entries, to)


@log.command()
@click.option('--entry', required=True, help='TimeEntry ID to log')
@click.option('--to', required=True, help='Destination log name')
def entry(entry, to):
    entry = get_the_one_or_fail(freshtools.models.TimeEntry, entry)
    to = get_the_one_or_fail(freshtools.models.LogDestination, to)

    log_entries(entry, to)


@log.group()
def destination():
    pass


@destination.command()
def list():
    list_destinations(printer)


@destination.command()
@click.argument('destination')
def add(destination):
    add_destination(destination)


@destination.command()
@click.argument('destination')
def remove(destination):
    remove_destination(destination)


#
# Main
#


store = TokenStore('.credentials')
api = get_freshbooks_api(
    settings.FRESHBOOKS_CLIENT_ID,
    settings.FRESHBOOKS_CLIENT_SECRET,
    store
)

if __name__ == '__main__':
    cli()
